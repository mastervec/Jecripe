var spring = 50.0;
var damper = 5.0;
var drag = 10.0;
var angularDrag = 5.0;
var distance = 0.2;
var attachToCenterOfMass = false;

private var springJoint : SpringJoint;

function Update ()
{
	// Make sure the user pressed the mouse down
	if (!Input.GetMouseButtonDown (0))
		return;

	var mainCamera = FindCamera();
		
	// We need to actually hit an object
	var hit : RaycastHit;
	if (!Physics.Raycast(mainCamera.ScreenPointToRay(Input.mousePosition),  hit, 100))
		return;
	// We need to hit a rigidbody that is not kinematic
	if (!hit.rigidbody || hit.rigidbody.isKinematic)
		return;
	
	Debug.Log("Object Clicked");
	if (hit.collider.CompareTag ("Bubble")) {
		Debug.Log("Is Bubble");
		//Destroy (hit.collider.gameObject);
	}
	
	/*if (!springJoint)
	{
		var go = new GameObject("Rigidbody dragger");
		body = go.AddComponent ("Rigidbody");
		springJoint = go.AddComponent ("SpringJoint");
		body.isKinematic = true;
	}
	
	springJoint.transform.position = hit.point;
	if (attachToCenterOfMass)
	{
		var anchor = transform.TransformDirection(hit.rigidbody.centerOfMass) + hit.rigidbody.transform.position;
		anchor = springJoint.transform.InverseTransformPoint(anchor);
		springJoint.anchor = anchor;
	}
	else
	{
		springJoint.anchor = Vector3.zero;
	}
	
	springJoint.spring = spring;
	springJoint.damper = damper;
	springJoint.maxDistance = distance;
	springJoint.connectedBody = hit.rigidbody;
	
	StartCoroutine ("DragObject", hit.distance);*/
}

function DragObject (distance : float)
{
	var oldDrag = springJoint.connectedBody.drag;
	var oldAngularDrag = springJoint.connectedBody.angularDrag;
	springJoint.connectedBody.drag = drag;
	springJoint.connectedBody.angularDrag = angularDrag;
	var mainCamera = FindCamera();
	while (Input.GetMouseButton (0))
	{
		var ray = mainCamera.ScreenPointToRay (Input.mousePosition);
		springJoint.transform.position = ray.GetPoint(distance);
		yield;
	}
	if (springJoint.connectedBody)
	{
		springJoint.connectedBody.drag = oldDrag;
		springJoint.connectedBody.angularDrag = oldAngularDrag;
		springJoint.connectedBody = null;
	}
}

function FindCamera ()
{
	if (GetComponent.<Camera>())
		return GetComponent.<Camera>();
	else
		return Camera.main;
}

/*function Update() {
}

function FixedUpdate() {
	//if (Input.GetMouseButton(0))	
		rigidbody.AddForce(100,1000,100);		
}*/

/*function OnCollisionEnter(collisionInfo: Collision) {
	if (collisionInfo.gameObject.tag == "Player") {
		GetComponent(Rigidbody).AddForce(Vector3.up * 500);
	}	
}*/

/*var screenSpace;
var offset;

function OnMouseDown(){
	Debug.Log("OnMouseDown");
	//this.GetComponent(Rigidbody).AddForce(100,100,0);
	screenSpace = Camera.main.WorldToScreenPoint(transform.position);	 
	offset = transform.position - Camera.main.ScreenToWorldPoint(Vector3(Input.mousePosition.x,Input.mousePosition.y, screenSpace.z));
}

function OnMouseDrag () {
	Debug.Log("OnMouseDrag");
	var curScreenSpace = Vector3(Input.mousePosition.x, Input.mousePosition.y, screenSpace.z);     
	var curPosition = Camera.main.ScreenToWorldPoint(curScreenSpace) + offset;
	transform.position = curPosition;     
	renderer.material.color -= Color.white * Time.deltaTime;
}*/

/*function OnMouseUp() {
	Debug.Log("OnMouseUp");
}*/

/*var newRotation:  float = 0;
var increment: float = 0.5;

function Update() {
	if (Input.GetMouseButton(0)) {	
		this.transform.Rotate(0,0,newRotation);
		newRotation = newRotation + 2;
		this.transform.position.y = this.transform.position.y + increment;
	}		
}*/

/*var increment: float = 0;
var startingPoints: Vector3; 
startingPoints = Vector3(transform.position.x,transform.position.y,transform.position.z);

function OnMouseEnter() {
	Debug.Log("OnMouseEnter");
}

function OnMouseExit() {
	Debug.Log("OnMouseExit");
	transform.position = (startingPoints);
}

function OnMouseOver() {
	Debug.Log("OnMouseOver");
	increment = increment + 0.0001;
	transform.position.x = transform.position.x + increment;
}*/

/*function OnMouseDown() {
	Debug.Log("OnMouseDown");
}

function OnMouseUp() {
	Debug.Log("OnMouseUp");	
}*/